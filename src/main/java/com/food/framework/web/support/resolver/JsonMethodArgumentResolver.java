package com.food.framework.web.support.resolver;import com.food.framework.web.support.annotation.JsonParam;import org.codehaus.jackson.map.ObjectMapper;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.core.MethodParameter;import org.springframework.util.StringUtils;import org.springframework.web.bind.MissingServletRequestParameterException;import org.springframework.web.bind.annotation.ValueConstants;import org.springframework.web.context.request.NativeWebRequest;import org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver;import javax.servlet.ServletException;/** * Created by user on 15/11/23. */public class JsonMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {    private static ObjectMapper mapper = new ObjectMapper();    /**     * @param beanFactory a bean factory to use for resolving ${...} placeholder     *                    and #{...} SpEL expressions in default values, or {@code null} if default     *                    values are not expected to contain expressions     */    public JsonMethodArgumentResolver(ConfigurableBeanFactory beanFactory) {        super(beanFactory);    }    public JsonMethodArgumentResolver() {        super(null);    }    @Override    protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {        JsonParam jsonParam = parameter.getParameterAnnotation(JsonParam.class);        return jsonParam != null ? new JsonParamNamedValueInfo(jsonParam) : new JsonParamNamedValueInfo();    }    @Override    protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {        String json = request.getParameter(name);        return StringUtils.isEmpty(json) ? null : mapper.readValue(json, parameter.getParameterType());    }    @Override    protected void handleMissingValue(String name, MethodParameter parameter) throws ServletException {        throw new MissingServletRequestParameterException(name, parameter.getParameterType().getSimpleName());    }    @Override    public boolean supportsParameter(MethodParameter parameter) {        return parameter.hasParameterAnnotation(JsonParam.class);    }    private class JsonParamNamedValueInfo extends NamedValueInfo {        private JsonParamNamedValueInfo() {            super("", false, ValueConstants.DEFAULT_NONE);        }        private JsonParamNamedValueInfo(JsonParam annotation) {            super(annotation.value(), annotation.required(), annotation.defaultValue());        }    }}